/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sodfs.storage.driver;

import java.util.ArrayList;
import org.alfresco.jlan.server.filesys.FileAttribute;
import org.alfresco.jlan.server.filesys.FileInfo;
import org.alfresco.jlan.server.filesys.SearchContext;
import org.sodfs.meta.api.entities.DirectoryEntity;
import org.sodfs.meta.api.entities.FileEntity;

/**
 *
 * @author Roman Kierzkowski
 */
public class SoDFSSearchContext extends SearchContext {

    ArrayList<FileInfo> result = new ArrayList<FileInfo>();
    int pos = 0;
    static int count = 0;

    public SoDFSSearchContext(String path, ArrayList<DirectoryEntity> directories, ArrayList<FileEntity> files) {
        if (directories != null) {
            for (DirectoryEntity d : directories) {
                FileInfo di = new FileInfo();
                di.setDirectoryId(d.getDirectoryId().intValue());
                di.setFileId(d.getDirectoryId().intValue());


                // name and path
                di.setShortName(d.getName());
                di.setPath(path + java.io.File.separator + d.getName());
                di.setFileName(d.getName());

                // times
                di.setCreationDateTime(d.getCreated().getTime());
                di.setChangeDateTime(d.getModified().getTime());
                di.setAccessDateTime(d.getAccessed().getTime());

                // size
                di.setSize(d.getNominalSize());
                di.setAllocationSize(d.getAllocationSize());

                // attributes
                di.setMode(d.getMode());
                di.setFileAttributes(d.getAttribute());
                di.setFileAttributes(FileAttribute.Directory);

                result.add(di);
            }
        }

        if (files != null) {
            for (FileEntity f : files) {
                FileInfo fi = new FileInfo();
                fi.setFileId(f.getFileId().intValue());

                // name and path
                fi.setShortName(f.getName());
                fi.setPath(path + java.io.File.separator + f.getName());
                fi.setFileName(f.getName());

                // times
                fi.setCreationDateTime(f.getCreated().getTime());
                fi.setChangeDateTime(f.getModified().getTime());
                fi.setAccessDateTime(f.getAccessed().getTime());

                // size
                fi.setSize(f.getNominalSize());
                fi.setAllocationSize(f.getAllocationSize());
                fi.setFileSize(f.getNominalSize());

                //attributes
                fi.setMode(f.getMode());
                fi.setFileAttributes(f.getAttribute());
                result.add(fi);
            }
        }

    }

    @Override
    public int getResumeId() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean hasMoreFiles() {
        return pos >= result.size();
    }

    @Override
    public boolean nextFileInfo(FileInfo fi) {
        boolean ret = true;
        if (pos < result.size()) {
            fi.copyFrom(result.get(pos));
            pos++;
        } else {
            ret = false;
        }
        return ret;
    }

    @Override
    public String nextFileName() {
        String ret = null;
        if (pos < result.size()) {
            ret = result.get(pos).getFileName();
            pos++;
        }
        return ret;
    }

    @Override
    public boolean restartAt(int newPos) {
        return false;
    }

    @Override
    public boolean restartAt(FileInfo arg0) {
        return false;
    }
}
