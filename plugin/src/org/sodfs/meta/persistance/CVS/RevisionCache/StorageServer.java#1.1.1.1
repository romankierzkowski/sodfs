/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.sodfs.meta.persistance;

import java.io.Serializable;
import java.util.Collection;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import org.sodfs.meta.api.entities.StorageServerEntity;

/**
 *
 * @author Roman
 */
@Entity
@Table(name = "storage_servers")
@NamedQueries({@NamedQuery(name = "StorageServer.findByName", query = "SELECT s FROM StorageServer s WHERE s.name = :name"), @NamedQuery(name = "StorageServer.findByAddress", query = "SELECT s FROM StorageServer s WHERE s.address = :address"), @NamedQuery(name = "StorageServer.findByStorageId", query = "SELECT s FROM StorageServer s WHERE s.storageId = :storageId"), @NamedQuery(name = "StorageServer.findByPort", query = "SELECT s FROM StorageServer s WHERE s.port = :port")})
public class StorageServer implements StorageServerEntity, Serializable {
    private static final long serialVersionUID = 1L;
    @Column(name = "name", nullable = false)
    private String name;
    @Column(name = "address", nullable = false)
    private String address;
    @Id
    @GeneratedValue(generator="STORAGE_SERVERS_storage_id_seq")
    @SequenceGenerator(name="STORAGE_SERVERS_storage_id_seq",sequenceName="STORAGE_SERVERS_storage_id_seq", allocationSize=1)
    @Column(name = "storage_id", nullable = false)
    private Long storageId;
    @Column(name = "port", nullable = false)
    private int port;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "storageServer")
    private Collection<Lock> lockCollection;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "storageServer1")
    private Collection<Replica> replicaCollection;

    public StorageServer() {
    }

    public StorageServer(Long storageId) {
        this.storageId = storageId;
    }

    public StorageServer(Long storageId, String name, String address, int port) {
        this.storageId = storageId;
        this.name = name;
        this.address = address;
        this.port = port;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Long getStorageId() {
        return storageId;
    }

    public void setStorageId(Long storageId) {
        this.storageId = storageId;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public Collection<Lock> getLockCollection() {
        return lockCollection;
    }

    public void setLockCollection(Collection<Lock> lockCollection) {
        this.lockCollection = lockCollection;
    }

    public Collection<Replica> getReplicaCollection() {
        return replicaCollection;
    }

    public void setReplicaCollection(Collection<Replica> replicaCollection) {
        this.replicaCollection = replicaCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (storageId != null ? storageId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof StorageServer)) {
            return false;
        }
        StorageServer other = (StorageServer) object;
        if ((this.storageId == null && other.storageId != null) || (this.storageId != null && !this.storageId.equals(other.storageId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "org.sodfs.meta.persistance.StorageServer[storageId=" + storageId + "]";
    }

}
