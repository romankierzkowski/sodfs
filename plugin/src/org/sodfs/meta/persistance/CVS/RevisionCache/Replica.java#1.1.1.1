/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.sodfs.meta.persistance;

import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import org.sodfs.meta.api.entities.ReplicaEntity;
import org.sodfs.meta.api.entities.ReplicaPKEntity;

/**
 *
 * @author Roman
 */
@Entity
@Table(name = "replicas")
@NamedQueries({@NamedQuery(name = "Replica.findByFile", query = "SELECT r FROM Replica r WHERE r.replicaPK.file = :file"), @NamedQuery(name = "Replica.findByStatus", query = "SELECT r FROM Replica r WHERE r.status = :status"), @NamedQuery(name = "Replica.findByStorageServer", query = "SELECT r FROM Replica r WHERE r.replicaPK.storageServer = :storageServer")})
public class Replica implements ReplicaEntity, Serializable {
    private static final long serialVersionUID = 1L;
    @EmbeddedId
    protected ReplicaPK replicaPK;
    @Column(name = "status", nullable = false)
    private int status;
    @JoinColumn(name = "file", referencedColumnName = "file_id", insertable = false, updatable = false)
    @ManyToOne
    private File file1;
    @JoinColumn(name = "storage_server", referencedColumnName = "storage_id", insertable = false, updatable = false)
    @ManyToOne
    private StorageServer storageServer1;

    public Replica() {
    }

    public Replica(ReplicaPK replicaPK) {
        this.replicaPK = replicaPK;
    }

    public Replica(ReplicaPK replicaPK, int status) {
        this.replicaPK = replicaPK;
        this.status = status;
    }

    public Replica(long file, long storageServer) {
        this.replicaPK = new ReplicaPK(file, storageServer);
    }

    public ReplicaPK getReplicaPK() {
        return replicaPK;
    }

    public void setReplicaPK(ReplicaPK replicaPK) {
        this.replicaPK = replicaPK;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public File getFile1() {
        return file1;
    }

    public void setFile1(File file1) {
        this.file1 = file1;
    }

    public StorageServer getStorageServer1() {
        return storageServer1;
    }

    public void setStorageServer1(StorageServer storageServer1) {
        this.storageServer1 = storageServer1;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (replicaPK != null ? replicaPK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Replica)) {
            return false;
        }
        Replica other = (Replica) object;
        if ((this.replicaPK == null && other.replicaPK != null) || (this.replicaPK != null && !this.replicaPK.equals(other.replicaPK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "org.sodfs.meta.persistance.Replica[replicaPK=" + replicaPK + "]";
    }

    public ReplicaPKEntity getReplicaPKEntity() {
        return replicaPK;
    }
}
