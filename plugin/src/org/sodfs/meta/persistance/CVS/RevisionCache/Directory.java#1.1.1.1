/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.sodfs.meta.persistance;

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.sodfs.meta.api.entities.DirectoryEntity;

/**
 *
 * @author Roman
 */
@Entity
@Table(name = "directories")
@NamedQueries({@NamedQuery(name = "Directory.findByName", query = "SELECT d FROM Directory d WHERE d.name = :name"), @NamedQuery(name = "Directory.findByNominalSize", query = "SELECT d FROM Directory d WHERE d.nominalSize = :nominalSize"), @NamedQuery(name = "Directory.findByAllocationSize", query = "SELECT d FROM Directory d WHERE d.allocationSize = :allocationSize"), @NamedQuery(name = "Directory.findByModified", query = "SELECT d FROM Directory d WHERE d.modified = :modified"), @NamedQuery(name = "Directory.findByCreated", query = "SELECT d FROM Directory d WHERE d.created = :created"), @NamedQuery(name = "Directory.findByAccessed", query = "SELECT d FROM Directory d WHERE d.accessed = :accessed"), @NamedQuery(name = "Directory.findByMode", query = "SELECT d FROM Directory d WHERE d.mode = :mode"), @NamedQuery(name = "Directory.findByAttribute", query = "SELECT d FROM Directory d WHERE d.attribute = :attribute"), @NamedQuery(name = "Directory.findByGroupId", query = "SELECT d FROM Directory d WHERE d.groupId = :groupId"), @NamedQuery(name = "Directory.findByUserId", query = "SELECT d FROM Directory d WHERE d.userId = :userId"), @NamedQuery(name = "Directory.findByDirectoryId", query = "SELECT d FROM Directory d WHERE d.directoryId = :directoryId")})
public class Directory implements DirectoryEntity, Serializable {
    private static final long serialVersionUID = 1L;
    @Column(name = "name", nullable = false)
    private String name;
    @Column(name = "nominal_size", nullable = false)
    private long nominalSize;
    @Column(name = "allocation_size", nullable = false)
    private long allocationSize;
    @Column(name = "modified", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date modified;
    @Column(name = "created", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date created;
    @Column(name = "accessed", nullable = false)
    @Temporal(TemporalType.TIME)
    private Date accessed;
    @Column(name = "mode", nullable = false)
    private int mode;
    @Column(name = "attribute", nullable = false)
    private int attribute;
    @Column(name = "group_id", nullable = false)
    private int groupId;
    @Column(name = "user_id", nullable = false)
    private int userId;
    @Id
    @GeneratedValue(generator="directories_directory_id_seq")
    @SequenceGenerator(name="directories_directory_id_seq",sequenceName="directories_directory_id_seq", allocationSize=1)
    @Column(name = "directory_id", nullable = false)
    private Long directoryId;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "parent")
    private Collection<File> fileCollection;
    @OneToMany(mappedBy = "parent")
    private Collection<Directory> directoryCollection;
    @JoinColumn(name = "parent", referencedColumnName = "directory_id")
    @ManyToOne
    private Directory parent;

    public Directory() {
    }

    public Directory(Long directoryId) {
        this.directoryId = directoryId;
    }

    public Directory(Long directoryId, String name, long nominalSize, long allocationSize, Date modified, Date created, Date accessed, int mode, int attribute, int groupId, int userId) {
        this.directoryId = directoryId;
        this.name = name;
        this.nominalSize = nominalSize;
        this.allocationSize = allocationSize;
        this.modified = modified;
        this.created = created;
        this.accessed = accessed;
        this.mode = mode;
        this.attribute = attribute;
        this.groupId = groupId;
        this.userId = userId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public long getNominalSize() {
        return nominalSize;
    }

    public void setNominalSize(long nominalSize) {
        this.nominalSize = nominalSize;
    }

    public long getAllocationSize() {
        return allocationSize;
    }

    public void setAllocationSize(long allocationSize) {
        this.allocationSize = allocationSize;
    }

    public Date getModified() {
        return modified;
    }

    public void setModified(Date modified) {
        this.modified = modified;
    }

    public Date getCreated() {
        return created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    public Date getAccessed() {
        return accessed;
    }

    public void setAccessed(Date accessed) {
        this.accessed = accessed;
    }

    public int getMode() {
        return mode;
    }

    public void setMode(int mode) {
        this.mode = mode;
    }

    public int getAttribute() {
        return attribute;
    }

    public void setAttribute(int attribute) {
        this.attribute = attribute;
    }

    public int getGroupId() {
        return groupId;
    }

    public void setGroupId(int groupId) {
        this.groupId = groupId;
    }

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public Long getDirectoryId() {
        return directoryId;
    }

    public void setDirectoryId(Long directoryId) {
        this.directoryId = directoryId;
    }

    public Collection<File> getFileCollection() {
        return fileCollection;
    }

    public void setFileCollection(Collection<File> fileCollection) {
        this.fileCollection = fileCollection;
    }

    public Collection<Directory> getDirectoryCollection() {
        return directoryCollection;
    }

    public void setDirectoryCollection(Collection<Directory> directoryCollection) {
        this.directoryCollection = directoryCollection;
    }

    public Directory getParent() {
        return parent;
    }

    public void setParent(Directory parent) {
        this.parent = parent;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (directoryId != null ? directoryId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Directory)) {
            return false;
        }
        Directory other = (Directory) object;
        if ((this.directoryId == null && other.directoryId != null) || (this.directoryId != null && !this.directoryId.equals(other.directoryId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "org.sodfs.meta.persistance.Directory[directoryId=" + directoryId + "]";
    }

}
